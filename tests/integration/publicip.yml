# Copyright 2017 CenturyLink
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Test clc_publicip.py Ansible Module
  hosts: localhost
  vars:
    location: 'CA3'
    group_name: 'Ansible Module Test'
    server_name: 'AnsTst'
    server_template: 'CENTOS-7-64-TEMPLATE'
    loadbalancer_name: 'Ansible Module Test'
  gather_facts: False
  connection: local
  tasks:
    - name: Setup - Ensure group present
      clc_group:
        location: "{{ location }}"
        name: "{{ group_name }}"
        state: present

    - name: Setup - Ensure 1 server exist in group
      clc_server:
        name: "{{ server_name }}"
        template: "{{ server_template }}"
        location: "{{ location }}"
        group: "{{ group_name }}"
        count_group: "{{ group_name }}"
        min_count: 1
      register: group_info


    - name: Setup - Server information
      clc_server_fact:
        server_id: "{{ group_info.group.servers[0] }}"
      register: server_info

    - name: Setup - Ensure public IP absent
      clc_publicip:
        server_ids:
          - "{{ server_info.server.id }}"
        state: absent
        wait: True
      register: publicip_absent


    - name: Test - Create public IP
      clc_publicip:
        server_id: "{{ server_info.server.id }}"
        protocol: TCP
        ports: 443
        state: present
        wait: True
      register: publicip_present
    - name: Assert - Public IP created
      assert:
        that:
          - publicip_present.changed == True

    - name: Test - Ensure public IP present
      clc_publicip:
        server_id: "{{ server_info.server.id }}"
        internal_ip: "{{ server_info.server.details.ipAddresses[0].internal }}"
        ports: 443
        protocol: TCP
        state: present
        wait: True
      register: publicip_present
    - name: Assert - Public IP present
      assert:
        that:
          - publicip_present.changed == False

    - name: Test - Update public IP ports
      clc_publicip:
        server_id: "{{ server_info.server.id }}"
        ports: [443, 80]
        protocol: 'TCP'
        state: present
        wait: True
      register: publicip_update_ports
    - name: Assert - Public IP updated ports
      assert:
        that:
          - publicip_update_ports.changed == True

    - name: Test - Ensure public IP present
      clc_publicip:
        server_id: "{{ server_info.server.id }}"
        ports: [443, 80]
        protocol: 'TCP'
        state: present
        wait: True
      register: publicip_present
    - name: Assert - Public IP present
      assert:
        that:
          - publicip_present.changed == False

    - name: Test - Update public IP restrictions
      clc_publicip:
        server_id: "{{ server_info.server.id }}"
        ports: [443, 80]
        protocol: 'TCP'
        source_restrictions: '1.2.3.4/32'
        state: present
        wait: True
      register: publicip_update_restrictions
    - name: Assert - Public IP restrictions updated
      assert:
        that:
          - publicip_update_restrictions.changed == True


    - name: Cleanup - Remove public IP
      clc_publicip:
        server_id: "{{ server_info.server.id }}"
        state: absent
        wait: True
      register: publicip_delete
    - name: Assert - Public IP deleted
      assert:
        that:
          - publicip_delete.changed == True


    - name: Tear Down - Ensure 0 servers exist in group
      clc_server:
        name: "{{ server_name }}"
        template: "{{ server_template }}"
        location: "{{ location }}"
        group: "{{ group_name }}"
        count_group: "{{ group_name }}"
        exact_count: 0

    - name: Tear Down - Ensure group absent
      clc_group:
        location: "{{ location }}"
        name: "{{ group_name }}"
        state: absent
